server:
  port: 8080


spring:
#  mvc:
#    static-path-pattern: /funny/**
#  resources:
#    static-locations: classpath:/funny,classpath:/META-INF/resources/,classpath:/resources,classpath:/static/,classpath:/public/
  datasource:
    url: jdbc:mysql://localhost:3306/funny?useUnicode=true&characterEncoding=UTF-8&useSSL=false
    username: root
    password: root
    #使用datasource数据源
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.jdbc.Driver
    druid:
      # 初始化大小、最小、最大
      initialSize: 1
      minIdle: 1
      maxActive: 20
      #获取连接等待超时时间
      maxWait: 60000
      #间隔多久才进行一次检测，检测需要关闭的空闲连接，单位为毫秒
      timeBetweenEvictionRunsMillis: 60000
      #一个连接池中最小生存时间，单位为毫秒
      minEvictableIdleTimeMillis: 300000
      validationQuery: SELECT 'x'
      testWhileIdle: true
      testOnBorrow: false
      tetsOnReturn: false
      #打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementsPerConnectionSize: 20
      # 配置监控统计拦截的filters
      filters: stat

  redis:
    host: 127.0.0.1
    port: 6379
    timeout: 6000ms
    #    集群环境打开下面注释，单机不需要打开
    #    cluster:
    #      集群信息
    #      nodes: xxx.xxx.xxx.xxx:xxxx,xxx.xxx.xxx.xxx:xxxx,xxx.xxx.xxx.xxx:xxxx
    #      #默认值是5 一般当此值设置过大时，容易报：Too many Cluster redirections
    #      maxRedirects: 3
    lettuce:
      pool:
        max-active: 8
        min-idle: 0
        max-idle: 8
        max-wait: -1ms
    password:
    database: 0

  kafka:
    bootstrap-servers: 167.179.84.191:9092 #可以分别设置生产者和消费者各自的

    producer:
      retries: 0
      batch-size: 16384
      buffer-memory: 33554432
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      properties:
        linger.ms: 1

    consumer:
      enable-auto-commit: false
      auto-commit-interval: 100ms
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        session.timeout.ms: 15000
      group-id: foo
      auto-offset-reset: earliest


netty:
  port: 7000


mybatis:
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: com.liang.funny.model


#pagehelper分页插件配置
pagehelper:
  helper-dialect: mysql
  reasonable: true
  support-methods-arguments: true
  params: countSql


logging:
  config: classpath:logback-spring.xml #日志路径 级别都在这个文件里设定了，无需再此文件设置

#dubbo设置
dubbo:
  application:
    name: dubbo-provider
  registry:
    address: 192.168.84.191:2181
    protocol: zookeeper
  protocol:
    name: dubbo
    port: 8001
  scan:
    base-packages: com.liang.funny.provider

#  #提供者配置：
#  #当前应用的名字
#  dubbo.application.name=dubbo-provider
#  #指定注册中心的地址和协议
#  dubbo.registry.address=xx.xx.xx.xx:2181
#  dubbo.registry.protocol=zookeeper
#  #使用dubbo协议，将服务暴露在端口8001
#  dubbo.protocol.name=dubbo
#  dubbo.protocol.port=8001
#  #基础包扫描
#  dubbo.scan.base-packages=com.wangcw.dubbo.provider
#
#
#  #消费者配置：
#  dubbo.application.name=dubbo-consumer
#  dubbo.protocol.name=dubbo
#  dubbo.registry.protocol=zookeeper
#  dubbo.registry.address=xx.xx.xx.xx:2181
#  dubbo.scan.base-packages=com.wangcw.duboo.consumer


